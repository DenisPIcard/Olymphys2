security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: auto
            
    role_hierarchy:
            ROLE_COMITE: [ROLE_USER,ROLE_ADMIN] 
            ROLE_ORGACIA: [ROLE_JURYCIA, ROLE_USER, ROLE_PROF]
            ROLE_JURYCIA: [ROLE_PROF, ROLE_USER]
            ROLE_ADMIN: [ROLE_PROF, ROLE_JURY, ROLE_COMITE, ROLE_ORGACIA]
            ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
            
    providers:
        our_db_provider:
            entity:
                class: App\Entity\User
                #property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern:    ^/
            user_checker: App\Security\UserChecker 
            http_basic: ~
            provider: our_db_provider
            anonymous: ~
            form_login:
                login_path: login
                check_path: login
                csrf_token_generator: security.csrf.token_manager
                csrf_parameter: _csrf_security_token
                csrf_token_id: a_private_string
                
            logout:
                path: /logout
                target: /
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
                   # - App\Security\TockenAuthenticator
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 3600 



            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/core/index, roles: ROLE_SUPER_ADMIN,}
        - { path :  ^/public, roles : ROLE_ADMIN }
  